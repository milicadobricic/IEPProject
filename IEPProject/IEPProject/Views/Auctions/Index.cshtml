@using PagedList.Mvc;
@using IEPProject.Models;
@model PagedList.IPagedList<IEPProject.Data_Models.Auction>

@{
    ViewBag.Title = "Index";
    ViewBag.ReturnPage = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

@{
    var m = new IEPProject.Models.SearchAuctions();
}
@Html.Partial("SearchPartial", m)

<div class="container text-center">
    @for (var i = 0; i < Model.Count() / 3; i++)
    {
        <div class="row">
            <div class="col-md-4">
                @Html.Partial("DetailsPartial", Model[i * 3 + 0])
            </div>
            <div class="col-md-4">
                @Html.Partial("DetailsPartial", Model[i * 3 + 1])
            </div>
            <div class="col-md-4">
                @Html.Partial("DetailsPartial", Model[i * 3 + 2])
            </div>
        </div>
    }
    <div class="row">
        @for (var i = 0; i < Model.Count() % 3; i++)
        {
            <div class="col-md-4">
                @Html.Partial("DetailsPartial", Model[Model.Count() - Model.Count() % 3 + i])
            </div>
        }
    </div>
</div>

<div>
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, Query = ViewBag.Query, MinPrice = ViewBag.MinPrice, MaxPrice = ViewBag.MaxPrice, State = ViewBag.State }))
</div>

<div id="idList" hidden>
    @string.Join(",", Model.Select(a => a.Id))
</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.3.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        function formatLeadingZeros(x) {
            if (x < 10)
                return "0" + x;
            return "" + x;
        }

        function updateTime() {
            var idList = document.getElementById("idList").innerHTML.trim().split(",");

            for (index in idList) {
                var id = idList[index];

                var endDateString = document.getElementById("closing_time_" + id).innerHTML.trim();
                var displayDiv = document.getElementById("remaining_time_" + id);
                var currentPrice = document.getElementById("current_price_name_" + id);
                var bidBy = document.getElementById("bid_by_" + id);
                var bidForm = document.getElementById("bid_form_" + id);

                var endDate = Date.parse(endDateString);

                if (isNaN(endDate)) {
                    displayDiv.innerHTML = "Auction not started!";
                    bidForm.hidden = true;
                    continue;
                }

                var now = Date.now().valueOf();
                var remaining = Math.floor((endDate - now) / 1000);

                if (remaining > 0) {
                    var hours = Math.floor(remaining / 3600);
                    var minutes = Math.floor((remaining % 3600) / 60);
                    var seconds = remaining % 60;

                    var displayString = "" + formatLeadingZeros(hours) + ":" + formatLeadingZeros(minutes) + ":" + formatLeadingZeros(seconds);
                    displayDiv.innerHTML = displayString;
                }
                else {
                    var currentPriceDiv = document.getElementById("current_price_" + id);
                    if (currentPriceDiv.innerHTML.trim() === "No bids yet!") {
                        displayDiv.classList.add("text-warning");
                        displayDiv.innerHTML = "Auction expired!";
                    }
                    else {
                        displayDiv.classList.add("text-danger");
                        displayDiv.innerHTML = "Auction closed!";
                        currentPrice.innerHTML = "Final price";
                        bidBy.classList.add("text-success");
                        bidBy.innerHTML = "Won by";
                    }

                    bidForm.hidden = true;
                }
            }
        }

        $(function () {
            updateTime();
            setInterval(updateTime, 500);
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.priceChangeHub;
            // Create a function that the hub can call back to display messages.
            chat.client.updatePrice = function (auctionId, price, username) {
                var currentPrice = document.getElementById('current_price_' + auctionId);
                var inputPrice = document.getElementById('input_price_' + auctionId);
                var currentUser = document.getElementById('current_user_' + auctionId);
                var currentPriceName = document.getElementById('current_price_name_' + auctionId);
                var bidBy = document.getElementById('bid_by_' + auctionId);
                if (currentPrice) {
                    currentPrice.innerHTML = price;
                    inputPrice.value = parseFloat(price) + 1;
                    currentUser.innerHTML = username;
                    currentPriceName.innerText = "Current price";
                    bidBy.innerText = "Bid by:";
                }
            };
            // Start the connection.
            $.connection.hub.start()
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}